import { Config } from '@backstage/config';
import { CatalogProcessor, LocationSpec, CatalogProcessorEmit, EntityProvider, EntityProviderConnection } from '@backstage/plugin-catalog-node';
import { Logger } from 'winston';
import { TaskRunner, PluginTaskScheduler, TaskScheduleDefinition } from '@backstage/backend-tasks';
import { UserEntity, GroupEntity } from '@backstage/catalog-model';
import { GitLabIntegrationConfig } from '@backstage/integration';

/**
 * Extracts repositories out of an GitLab instance.
 * @public
 */
declare class GitLabDiscoveryProcessor implements CatalogProcessor {
    private readonly integrations;
    private readonly logger;
    private readonly cache;
    private readonly skipReposWithoutExactFileMatch;
    private readonly skipForkedRepos;
    static fromConfig(config: Config, options: {
        logger: Logger;
        skipReposWithoutExactFileMatch?: boolean;
        skipForkedRepos?: boolean;
    }): GitLabDiscoveryProcessor;
    private constructor();
    getProcessorName(): string;
    readLocation(location: LocationSpec, _optional: boolean, emit: CatalogProcessorEmit): Promise<boolean>;
    private getCacheKey;
}

/**
 * Discovers entity definition files in the groups of a Gitlab instance.
 * @public
 */
declare class GitlabDiscoveryEntityProvider implements EntityProvider {
    private readonly config;
    private readonly integration;
    private readonly logger;
    private readonly scheduleFn;
    private connection?;
    static fromConfig(config: Config, options: {
        logger: Logger;
        schedule?: TaskRunner;
        scheduler?: PluginTaskScheduler;
    }): GitlabDiscoveryEntityProvider[];
    private constructor();
    getProviderName(): string;
    connect(connection: EntityProviderConnection): Promise<void>;
    private createScheduleFn;
    refresh(logger: Logger): Promise<void>;
    private createLocationSpec;
}

/**
 * Representation of a GitLab user in the GitLab API
 *
 * @public
 */
type GitLabUser = {
    id: number;
    username: string;
    email?: string;
    name: string;
    state: string;
    web_url: string;
    avatar_url: string;
    groups?: GitLabGroup[];
    group_saml_identity?: GitLabGroupSamlIdentity;
};
/**
 * @public
 */
type GitLabGroupSamlIdentity = {
    extern_uid: string;
};
/**
 * Representation of a GitLab group in the GitLab API
 *
 * @public
 */
type GitLabGroup = {
    id: number;
    name: string;
    full_path: string;
    description?: string;
    parent_id?: number;
};
/**
 * The configuration parameters for the GitlabProvider
 *
 * @public
 */
type GitlabProviderConfig = {
    /**
     * Identifies one of the hosts set up in the integrations
     */
    host: string;
    /**
     * Required for gitlab.com when `orgEnabled: true`.
     * Optional for self managed. Must not end with slash.
     * Accepts only groups under the provided path (which will be stripped)
     */
    group: string;
    /**
     * ???
     */
    id: string;
    /**
     * The name of the branch to be used, to discover catalog files.
     */
    branch?: string;
    /**
     * If no `branch` is configured and there is no default branch defined at the project as well, this fallback is used
     * to discover catalog files.
     * Defaults to: `master`
     */
    fallbackBranch: string;
    /**
     * Defaults to `catalog-info.yaml`
     */
    catalogFile: string;
    /**
     * Filters found projects based on provided patter.
     * Defaults to `[\s\S]*`, which means to not filter anything
     */
    projectPattern: RegExp;
    /**
     * Filters found users based on provided patter.
     * Defaults to `[\s\S]*`, which means to not filter anything
     */
    userPattern: RegExp;
    /**
     * Filters found groups based on provided patter.
     * Defaults to `[\s\S]*`, which means to not filter anything
     */
    groupPattern: RegExp;
    orgEnabled?: boolean;
    schedule?: TaskScheduleDefinition;
    /**
     * If the project is a fork, skip repository
     */
    skipForkedRepos?: boolean;
};
/**
 * Customize how group names are generated
 *
 * @public
 */
type GroupNameTransformer = (options: GroupNameTransformerOptions) => string;
/**
 * The GroupTransformerOptions
 *
 * @public
 */
interface GroupNameTransformerOptions {
    group: GitLabGroup;
    providerConfig: GitlabProviderConfig;
}
/**
 * Customize the ingested User entity
 *
 * @public
 */
type UserTransformer = (options: UserTransformerOptions) => UserEntity;
/**
 * The UserTransformerOptions
 *
 * @public
 */
interface UserTransformerOptions {
    user: GitLabUser;
    integrationConfig: GitLabIntegrationConfig;
    providerConfig: GitlabProviderConfig;
    groupNameTransformer: GroupNameTransformer;
}
/**
 * Customize the ingested Group entity
 *
 * @public
 */
type GroupTransformer = (options: GroupTransformerOptions) => GroupEntity[];
/**
 * The GroupTransformer options
 *
 * @public
 */
interface GroupTransformerOptions {
    groups: GitLabGroup[];
    providerConfig: GitlabProviderConfig;
    groupNameTransformer: GroupNameTransformer;
}

/**
 * Discovers users and groups from a Gitlab instance.
 * @public
 */
declare class GitlabOrgDiscoveryEntityProvider implements EntityProvider {
    private readonly config;
    private readonly integration;
    private readonly logger;
    private readonly scheduleFn;
    private connection?;
    private userTransformer;
    private groupEntitiesTransformer;
    private groupNameTransformer;
    static fromConfig(config: Config, options: {
        logger: Logger;
        schedule?: TaskRunner;
        scheduler?: PluginTaskScheduler;
        userTransformer?: UserTransformer;
        groupEntitiesTransformer?: GroupTransformer;
        groupNameTransformer?: GroupNameTransformer;
    }): GitlabOrgDiscoveryEntityProvider[];
    private constructor();
    getProviderName(): string;
    connect(connection: EntityProviderConnection): Promise<void>;
    private createScheduleFn;
    private refresh;
    private withLocations;
}

export { GitLabDiscoveryProcessor, GitLabGroup, GitLabGroupSamlIdentity, GitLabUser, GitlabDiscoveryEntityProvider, GitlabOrgDiscoveryEntityProvider, GitlabProviderConfig, GroupNameTransformer, GroupNameTransformerOptions, GroupTransformer, GroupTransformerOptions, UserTransformer, UserTransformerOptions };
