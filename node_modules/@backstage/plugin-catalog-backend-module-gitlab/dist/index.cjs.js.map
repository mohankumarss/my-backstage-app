{"version":3,"file":"index.cjs.js","sources":["../src/GitLabDiscoveryProcessor.ts","../src/lib/defaultTransformers.ts","../src/providers/GitlabOrgDiscoveryEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheClient,\n  CacheManager,\n  PluginCacheManager,\n} from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { Logger } from 'winston';\nimport { GitLabClient, GitLabProject, paginated } from './lib';\n\n/**\n * Extracts repositories out of an GitLab instance.\n * @public\n */\nexport class GitLabDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: Logger;\n  private readonly cache: CacheClient;\n  private readonly skipReposWithoutExactFileMatch: boolean;\n  private readonly skipForkedRepos: boolean;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      skipReposWithoutExactFileMatch?: boolean;\n      skipForkedRepos?: boolean;\n    },\n  ): GitLabDiscoveryProcessor {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const pluginCache =\n      CacheManager.fromConfig(config).forPlugin('gitlab-discovery');\n\n    return new GitLabDiscoveryProcessor({\n      ...options,\n      integrations,\n      pluginCache,\n    });\n  }\n\n  private constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    pluginCache: PluginCacheManager;\n    logger: Logger;\n    skipReposWithoutExactFileMatch?: boolean;\n    skipForkedRepos?: boolean;\n  }) {\n    this.integrations = options.integrations;\n    this.cache = options.pluginCache.getClient();\n    this.logger = options.logger;\n    this.skipReposWithoutExactFileMatch =\n      options.skipReposWithoutExactFileMatch || false;\n    this.skipForkedRepos = options.skipForkedRepos || false;\n  }\n\n  getProcessorName(): string {\n    return 'GitLabDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'gitlab-discovery') {\n      return false;\n    }\n\n    const startTime = new Date();\n    const { group, host, branch, catalogPath } = parseUrl(location.target);\n\n    const integration = this.integrations.gitlab.byUrl(`https://${host}`);\n    if (!integration) {\n      throw new Error(\n        `There is no GitLab integration that matches ${host}. Please add a configuration entry for it under integrations.gitlab`,\n      );\n    }\n\n    const client = new GitLabClient({\n      config: integration.config,\n      logger: this.logger,\n    });\n    this.logger.debug(`Reading GitLab projects from ${location.target}`);\n\n    const lastActivity = (await this.cache.get(this.getCacheKey())) as string;\n    const opts = {\n      archived: false,\n      group,\n      page: 1,\n      // We check for the existence of lastActivity and only set it if it's present to ensure\n      // that the options doesn't include the key so that the API doesn't receive an empty query parameter.\n      ...(lastActivity && { last_activity_after: lastActivity }),\n    };\n\n    const projects = paginated(options => client.listProjects(options), opts);\n\n    const res: Result = {\n      scanned: 0,\n      matches: [],\n    };\n    for await (const project of projects) {\n      res.scanned++;\n\n      if (branch === '*' && project.default_branch === undefined) {\n        continue;\n      }\n\n      if (this.skipReposWithoutExactFileMatch) {\n        const project_branch = branch === '*' ? project.default_branch : branch;\n\n        const projectHasFile: boolean = await client.hasFile(\n          project.path_with_namespace,\n          project_branch,\n          catalogPath,\n        );\n\n        if (!projectHasFile) {\n          continue;\n        }\n      }\n\n      if (\n        this.skipForkedRepos &&\n        project.hasOwnProperty('forked_from_project')\n      ) {\n        continue;\n      }\n\n      res.matches.push(project);\n    }\n\n    for (const project of res.matches) {\n      const project_branch = branch === '*' ? project.default_branch : branch;\n\n      emit(\n        processingResult.location({\n          type: 'url',\n          // The format expected by the GitLabUrlReader:\n          // https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n          //\n          // This unfortunately will trigger another API call in `getGitLabFileFetchUrl` to get the project ID.\n          // The alternative is using the `buildRawUrl` function, which does not support subgroups, so providing a raw\n          // URL here won't work either.\n          target: `${project.web_url}/-/blob/${project_branch}/${catalogPath}`,\n          presence: 'optional',\n        }),\n      );\n    }\n\n    // Save an ISO formatted string in the cache as that's what GitLab expects in the API request.\n    await this.cache.set(this.getCacheKey(), startTime.toISOString());\n\n    const duration = ((Date.now() - startTime.getTime()) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${res.scanned} GitLab repositories in ${duration} seconds`,\n    );\n\n    return true;\n  }\n\n  private getCacheKey(): string {\n    return `processors/${this.getProcessorName()}/last-activity`;\n  }\n}\n\ntype Result = {\n  scanned: number;\n  matches: GitLabProject[];\n};\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  group?: string;\n  host: string;\n  branch: string;\n  catalogPath: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.slice(1).split('/');\n\n  // (/group/subgroup)/blob/branch|*/filepath\n  const blobIndex = path.findIndex(p => p === 'blob');\n  if (blobIndex !== -1 && path.length > blobIndex + 2) {\n    const group =\n      blobIndex > 0 ? path.slice(0, blobIndex).join('/') : undefined;\n\n    return {\n      group,\n      host: url.host,\n      branch: decodeURIComponent(path[blobIndex + 1]),\n      catalogPath: decodeURIComponent(path.slice(blobIndex + 2).join('/')),\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { GroupEntity, UserEntity } from '@backstage/catalog-model';\nimport {\n  GitLabGroup,\n  GroupNameTransformerOptions,\n  GroupTransformerOptions,\n  UserTransformerOptions,\n} from './types';\n\nexport function defaultGroupNameTransformer(\n  options: GroupNameTransformerOptions,\n): string {\n  if (\n    options.providerConfig.group &&\n    options.group.full_path.startsWith(`${options.providerConfig.group}/`)\n  ) {\n    return options.group.full_path\n      .replace(`${options.providerConfig.group}/`, '')\n      .replaceAll('/', '-');\n  }\n  return options.group.full_path.replaceAll('/', '-');\n}\n\nexport function defaultGroupEntitiesTransformer(\n  options: GroupTransformerOptions,\n): GroupEntity[] {\n  const idMapped: { [groupId: number]: GitLabGroup } = {};\n  const entities: GroupEntity[] = [];\n\n  for (const group of options.groups) {\n    idMapped[group.id] = group;\n  }\n\n  for (const group of options.groups) {\n    const annotations: { [annotationName: string]: string } = {};\n\n    annotations[`${options.providerConfig.host}/team-path`] = group.full_path;\n\n    const entity: GroupEntity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Group',\n      metadata: {\n        name: options.groupNameTransformer({\n          group,\n          providerConfig: options.providerConfig,\n        }),\n        annotations: annotations,\n      },\n      spec: {\n        type: 'team',\n        children: [],\n        profile: {\n          displayName: group.name,\n        },\n      },\n    };\n\n    if (group.description) {\n      entity.metadata.description = group.description;\n    }\n\n    if (group.parent_id && idMapped.hasOwnProperty(group.parent_id)) {\n      entity.spec.parent = options.groupNameTransformer({\n        group: idMapped[group.parent_id],\n        providerConfig: options.providerConfig,\n      });\n    }\n\n    entities.push(entity);\n  }\n\n  return entities;\n}\n\n/**\n * The default implementation of the transformation from a graph user entry to\n * a User entity.\n *\n * @public\n */\nexport function defaultUserTransformer(\n  options: UserTransformerOptions,\n): UserEntity {\n  const annotations: { [annotationName: string]: string } = {};\n\n  annotations[`${options.integrationConfig.host}/user-login`] =\n    options.user.web_url;\n  if (options.user?.group_saml_identity?.extern_uid) {\n    annotations[`${options.integrationConfig.host}/saml-external-uid`] =\n      options.user.group_saml_identity.extern_uid;\n  }\n\n  const entity: UserEntity = {\n    apiVersion: 'backstage.io/v1alpha1',\n    kind: 'User',\n    metadata: {\n      name: options.user.username,\n      annotations: annotations,\n    },\n    spec: {\n      profile: {\n        displayName: options.user.name || undefined,\n        picture: options.user.avatar_url || undefined,\n      },\n      memberOf: [],\n    },\n  };\n\n  if (options.user.email) {\n    if (!entity.spec) {\n      entity.spec = {};\n    }\n\n    if (!entity.spec.profile) {\n      entity.spec.profile = {};\n    }\n\n    entity.spec.profile.email = options.user.email;\n  }\n\n  if (options.user.groups) {\n    for (const group of options.user.groups) {\n      if (!entity.spec.memberOf) {\n        entity.spec.memberOf = [];\n      }\n      entity.spec.memberOf.push(\n        options.groupNameTransformer({\n          group,\n          providerConfig: options.providerConfig,\n        }),\n      );\n    }\n  }\n\n  return entity;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PluginTaskScheduler, TaskRunner } from '@backstage/backend-tasks';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { GitLabIntegration, ScmIntegrations } from '@backstage/integration';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { merge } from 'lodash';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\n\nimport {\n  GitLabClient,\n  GitlabProviderConfig,\n  paginated,\n  readGitlabConfigs,\n} from '../lib';\nimport {\n  GitLabGroup,\n  GitLabUser,\n  PagedResponse,\n  UserTransformer,\n  GroupTransformer as GroupEntitiesTransformer,\n  GroupNameTransformer,\n} from '../lib/types';\nimport {\n  defaultGroupNameTransformer,\n  defaultGroupEntitiesTransformer,\n  defaultUserTransformer,\n} from '../lib/defaultTransformers';\n\ntype Result = {\n  scanned: number;\n  matches: GitLabUser[];\n};\n\ntype GroupResult = {\n  scanned: number;\n  matches: GitLabGroup[];\n};\n\n/**\n * Discovers users and groups from a Gitlab instance.\n * @public\n */\nexport class GitlabOrgDiscoveryEntityProvider implements EntityProvider {\n  private readonly config: GitlabProviderConfig;\n  private readonly integration: GitLabIntegration;\n  private readonly logger: Logger;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n  private userTransformer: UserTransformer;\n  private groupEntitiesTransformer: GroupEntitiesTransformer;\n  private groupNameTransformer: GroupNameTransformer;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      schedule?: TaskRunner;\n      scheduler?: PluginTaskScheduler;\n      userTransformer?: UserTransformer;\n      groupEntitiesTransformer?: GroupEntitiesTransformer;\n      groupNameTransformer?: GroupNameTransformer;\n    },\n  ): GitlabOrgDiscoveryEntityProvider[] {\n    if (!options.schedule && !options.scheduler) {\n      throw new Error('Either schedule or scheduler must be provided.');\n    }\n\n    const providerConfigs = readGitlabConfigs(config);\n    const integrations = ScmIntegrations.fromConfig(config).gitlab;\n    const providers: GitlabOrgDiscoveryEntityProvider[] = [];\n\n    providerConfigs.forEach(providerConfig => {\n      const integration = integrations.byHost(providerConfig.host);\n\n      if (!providerConfig.orgEnabled) {\n        return;\n      }\n\n      if (!integration) {\n        throw new Error(\n          `No gitlab integration found that matches host ${providerConfig.host}`,\n        );\n      }\n\n      if (!providerConfig.group && providerConfig.host === 'gitlab.com') {\n        throw new Error(\n          `Missing 'group' value for GitlabOrgDiscoveryEntityProvider:${providerConfig.id}.`,\n        );\n      }\n\n      if (!options.schedule && !providerConfig.schedule) {\n        throw new Error(\n          `No schedule provided neither via code nor config for GitlabOrgDiscoveryEntityProvider:${providerConfig.id}.`,\n        );\n      }\n\n      const taskRunner =\n        options.schedule ??\n        options.scheduler!.createScheduledTaskRunner(providerConfig.schedule!);\n\n      providers.push(\n        new GitlabOrgDiscoveryEntityProvider({\n          ...options,\n          config: providerConfig,\n          integration,\n          taskRunner,\n        }),\n      );\n    });\n    return providers;\n  }\n\n  private constructor(options: {\n    config: GitlabProviderConfig;\n    integration: GitLabIntegration;\n    logger: Logger;\n    taskRunner: TaskRunner;\n    userTransformer?: UserTransformer;\n    groupEntitiesTransformer?: GroupEntitiesTransformer;\n    groupNameTransformer?: GroupNameTransformer;\n  }) {\n    this.config = options.config;\n    this.integration = options.integration;\n    this.logger = options.logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(options.taskRunner);\n    this.userTransformer = options.userTransformer ?? defaultUserTransformer;\n    this.groupEntitiesTransformer =\n      options.groupEntitiesTransformer ?? defaultGroupEntitiesTransformer;\n    this.groupNameTransformer =\n      options.groupNameTransformer ?? defaultGroupNameTransformer;\n  }\n\n  getProviderName(): string {\n    return `GitlabOrgDiscoveryEntityProvider:${this.config.id}`;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    await this.scheduleFn();\n  }\n\n  private createScheduleFn(taskRunner: TaskRunner): () => Promise<void> {\n    return async () => {\n      const taskId = `${this.getProviderName()}:refresh`;\n      return taskRunner.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: GitlabOrgDiscoveryEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n\n  private async refresh(logger: Logger): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n\n    const client = new GitLabClient({\n      config: this.integration.config,\n      logger: logger,\n    });\n\n    let groups;\n    let users;\n\n    if (client.isSelfManaged()) {\n      groups = paginated<GitLabGroup>(options => client.listGroups(options), {\n        page: 1,\n        per_page: 100,\n      });\n\n      users = paginated<GitLabUser>(options => client.listUsers(options), {\n        page: 1,\n        per_page: 100,\n        active: true,\n      });\n    } else {\n      groups = (await client.listDescendantGroups(this.config.group)).items;\n      const rootGroup = this.config.group.split('/')[0];\n      users = paginated<GitLabUser>(\n        options => client.listSaaSUsers(rootGroup, options),\n        {\n          page: 1,\n          per_page: 100,\n        },\n      );\n    }\n\n    const idMappedUser: { [userId: number]: GitLabUser } = {};\n\n    const res: Result = {\n      scanned: 0,\n      matches: [],\n    };\n\n    const groupRes: GroupResult = {\n      scanned: 0,\n      matches: [],\n    };\n\n    for await (const user of users) {\n      if (!this.config.userPattern.test(user.email ?? user.username ?? '')) {\n        continue;\n      }\n\n      res.scanned++;\n\n      if (user.state !== 'active') {\n        continue;\n      }\n\n      idMappedUser[user.id] = user;\n      res.matches.push(user);\n    }\n\n    for await (const group of groups) {\n      if (!this.config.groupPattern.test(group.full_path ?? '')) {\n        continue;\n      }\n\n      if (\n        this.config.group &&\n        !group.full_path.startsWith(`${this.config.group}/`)\n      ) {\n        continue;\n      }\n\n      groupRes.scanned++;\n      groupRes.matches.push(group);\n\n      let groupUsers: PagedResponse<GitLabUser> = { items: [] };\n      try {\n        groupUsers = await client.getGroupMembers(group.full_path, ['DIRECT']);\n      } catch (e) {\n        logger.error(\n          `Failed fetching users for group '${group.full_path}': ${e}`,\n        );\n      }\n\n      for (const groupUser of groupUsers.items) {\n        const user = idMappedUser[groupUser.id];\n        if (user) {\n          user.groups = (user.groups ?? []).concat(group);\n        }\n      }\n    }\n\n    const groupsWithUsers = groupRes.matches.filter(group => {\n      return (\n        res.matches.filter(x => {\n          return !!x.groups?.find(y => y.id === group.id);\n        }).length > 0\n      );\n    });\n\n    const userEntities = res.matches.map(p =>\n      this.userTransformer({\n        user: p,\n        integrationConfig: this.integration.config,\n        providerConfig: this.config,\n        groupNameTransformer: this.groupNameTransformer,\n      }),\n    );\n\n    const groupEntities = this.groupEntitiesTransformer({\n      groups: groupsWithUsers,\n      providerConfig: this.config,\n      groupNameTransformer: this.groupNameTransformer,\n    });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...userEntities, ...groupEntities].map(entity => ({\n        locationKey: this.getProviderName(),\n        entity: this.withLocations(\n          this.integration.config.host,\n          this.integration.config.baseUrl,\n          entity,\n        ),\n      })),\n    });\n  }\n\n  private withLocations(host: string, baseUrl: string, entity: Entity): Entity {\n    const location =\n      entity.kind === 'Group'\n        ? `url:${baseUrl}/${entity.metadata.annotations?.[`${host}/team-path`]}`\n        : `url:${baseUrl}/${entity.metadata.name}`;\n    return merge(\n      {\n        metadata: {\n          annotations: {\n            [ANNOTATION_LOCATION]: location,\n            [ANNOTATION_ORIGIN_LOCATION]: location,\n          },\n        },\n      },\n      entity,\n    ) as Entity;\n  }\n}\n"],"names":["__publicField","ScmIntegrations","CacheManager","GitLabClient","paginated","processingResult","readGitlabConfigs","uuid","_a","merge","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION"],"mappings":"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"}