{"version":3,"file":"GitlabDiscoveryEntityProvider-c1949eb0.cjs.js","sources":["../../src/lib/client.ts","../../src/providers/config.ts","../../src/providers/GitlabDiscoveryEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  getGitLabRequestOptions,\n  GitLabIntegrationConfig,\n} from '@backstage/integration';\nimport fetch from 'node-fetch';\nimport { Logger } from 'winston';\n\nimport {\n  GitLabDescendantGroupsResponse,\n  GitLabGroup,\n  GitLabGroupMembersResponse,\n  GitLabUser,\n  PagedResponse,\n} from './types';\n\nexport type CommonListOptions = {\n  [key: string]: string | number | boolean | undefined;\n  per_page?: number | undefined;\n  page?: number | undefined;\n  active?: boolean;\n};\n\ninterface ListProjectOptions extends CommonListOptions {\n  archived?: boolean;\n  group?: string;\n}\n\ninterface UserListOptions extends CommonListOptions {\n  without_project_bots?: boolean | undefined;\n  exclude_internal?: boolean | undefined;\n}\n\nexport class GitLabClient {\n  private readonly config: GitLabIntegrationConfig;\n  private readonly logger: Logger;\n\n  constructor(options: { config: GitLabIntegrationConfig; logger: Logger }) {\n    this.config = options.config;\n    this.logger = options.logger;\n  }\n\n  /**\n   * Indicates whether the client is for a SaaS or self managed GitLab instance.\n   */\n  isSelfManaged(): boolean {\n    return this.config.host !== 'gitlab.com';\n  }\n\n  async listProjects(\n    options?: ListProjectOptions,\n  ): Promise<PagedResponse<any>> {\n    if (options?.group) {\n      return this.pagedRequest(\n        `/groups/${encodeURIComponent(options?.group)}/projects`,\n        {\n          ...options,\n          include_subgroups: true,\n        },\n      );\n    }\n\n    return this.pagedRequest(`/projects`, options);\n  }\n\n  async listUsers(\n    options?: UserListOptions,\n  ): Promise<PagedResponse<GitLabUser>> {\n    return this.pagedRequest(`/users?`, {\n      ...options,\n      without_project_bots: true,\n      exclude_internal: true,\n    });\n  }\n\n  async listSaaSUsers(\n    groupPath: string,\n    options?: CommonListOptions,\n  ): Promise<PagedResponse<GitLabUser>> {\n    return this.pagedRequest(\n      `/groups/${encodeURIComponent(groupPath)}/members/all`,\n      {\n        ...options,\n        show_seat_info: true,\n      },\n    ).then(resp => {\n      resp.items = resp.items.filter(user => user.is_using_seat);\n      return resp;\n    });\n  }\n\n  async listGroups(\n    options?: CommonListOptions,\n  ): Promise<PagedResponse<GitLabGroup>> {\n    return this.pagedRequest(`/groups`, options);\n  }\n\n  async listDescendantGroups(\n    groupPath: string,\n  ): Promise<PagedResponse<GitLabGroup>> {\n    const items: GitLabGroup[] = [];\n    let hasNextPage: boolean = false;\n    let endCursor: string | null = null;\n\n    do {\n      const response: GitLabDescendantGroupsResponse = await fetch(\n        `${this.config.baseUrl}/api/graphql`,\n        {\n          method: 'POST',\n          headers: {\n            ...getGitLabRequestOptions(this.config).headers,\n            ['Content-Type']: 'application/json',\n          },\n          body: JSON.stringify({\n            variables: { group: groupPath, endCursor },\n            query: /* GraphQL */ `\n              query listDescendantGroups($group: ID!, $endCursor: String) {\n                group(fullPath: $group) {\n                  descendantGroups(first: 100, after: $endCursor) {\n                    nodes {\n                      id\n                      name\n                      description\n                      fullPath\n                      parent {\n                        id\n                      }\n                    }\n                    pageInfo {\n                      endCursor\n                      hasNextPage\n                    }\n                  }\n                }\n              }\n            `,\n          }),\n        },\n      ).then(r => r.json());\n      if (response.errors) {\n        throw new Error(`GraphQL errors: ${JSON.stringify(response.errors)}`);\n      }\n\n      if (!response.data.group?.descendantGroups?.nodes) {\n        this.logger.warn(\n          `Couldn't get groups under ${groupPath}. The provided token might not have sufficient permissions`,\n        );\n        continue;\n      }\n\n      for (const groupItem of response.data.group.descendantGroups.nodes.filter(\n        group => group?.id,\n      )) {\n        const formattedGroupResponse = {\n          id: Number(groupItem.id.replace(/^gid:\\/\\/gitlab\\/Group\\//, '')),\n          name: groupItem.name,\n          description: groupItem.description,\n          full_path: groupItem.fullPath,\n          parent_id: Number(\n            groupItem.parent.id.replace(/^gid:\\/\\/gitlab\\/Group\\//, ''),\n          ),\n        };\n\n        items.push(formattedGroupResponse);\n      }\n      ({ hasNextPage, endCursor } =\n        response.data.group.descendantGroups.pageInfo);\n    } while (hasNextPage);\n    return { items };\n  }\n\n  async getGroupMembers(\n    groupPath: string,\n    relations: string[],\n  ): Promise<PagedResponse<GitLabUser>> {\n    const items: GitLabUser[] = [];\n    let hasNextPage: boolean = false;\n    let endCursor: string | null = null;\n    do {\n      const response: GitLabGroupMembersResponse = await fetch(\n        `${this.config.baseUrl}/api/graphql`,\n        {\n          method: 'POST',\n          headers: {\n            ...getGitLabRequestOptions(this.config).headers,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            variables: { group: groupPath, relations: relations, endCursor },\n            query: /* GraphQL */ `\n              query getGroupMembers(\n                $group: ID!\n                $relations: [GroupMemberRelation!]\n                $endCursor: String\n              ) {\n                group(fullPath: $group) {\n                  groupMembers(\n                    first: 100\n                    relations: $relations\n                    after: $endCursor\n                  ) {\n                    nodes {\n                      user {\n                        id\n                        username\n                        publicEmail\n                        name\n                        state\n                        webUrl\n                        avatarUrl\n                      }\n                    }\n                    pageInfo {\n                      endCursor\n                      hasNextPage\n                    }\n                  }\n                }\n              }\n            `,\n          }),\n        },\n      ).then(r => r.json());\n      if (response.errors) {\n        throw new Error(`GraphQL errors: ${JSON.stringify(response.errors)}`);\n      }\n\n      if (!response.data.group?.groupMembers?.nodes) {\n        this.logger.warn(\n          `Couldn't get members for group ${groupPath}. The provided token might not have sufficient permissions`,\n        );\n        continue;\n      }\n\n      for (const userItem of response.data.group.groupMembers.nodes.filter(\n        user => user.user?.id,\n      )) {\n        const formattedUserResponse = {\n          id: Number(userItem.user.id.replace(/^gid:\\/\\/gitlab\\/User\\//, '')),\n          username: userItem.user.username,\n          email: userItem.user.publicEmail,\n          name: userItem.user.name,\n          state: userItem.user.state,\n          web_url: userItem.user.webUrl,\n          avatar_url: userItem.user.avatarUrl,\n        };\n\n        items.push(formattedUserResponse);\n      }\n      ({ hasNextPage, endCursor } = response.data.group.groupMembers.pageInfo);\n    } while (hasNextPage);\n    return { items };\n  }\n\n  /**\n   * General existence check.\n   *\n   * @param projectPath - The path to the project\n   * @param branch - The branch used to search\n   * @param filePath - The path to the file\n   */\n  async hasFile(\n    projectPath: string,\n    branch: string,\n    filePath: string,\n  ): Promise<boolean> {\n    const endpoint: string = `/projects/${encodeURIComponent(\n      projectPath,\n    )}/repository/files/${encodeURIComponent(filePath)}`;\n    const request = new URL(`${this.config.apiBaseUrl}${endpoint}`);\n    request.searchParams.append('ref', branch);\n\n    const response = await fetch(request.toString(), {\n      headers: getGitLabRequestOptions(this.config).headers,\n      method: 'HEAD',\n    });\n\n    if (!response.ok) {\n      if (response.status >= 500) {\n        this.logger.debug(\n          `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n            response.status\n          } - ${response.statusText}`,\n        );\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Performs a request against a given paginated GitLab endpoint.\n   *\n   * This method may be used to perform authenticated REST calls against any\n   * paginated GitLab endpoint which uses X-NEXT-PAGE headers. The return value\n   * can be be used with the {@link paginated} async-generator function to yield\n   * each item from the paged request.\n   *\n   * @see {@link paginated}\n   * @param endpoint - The request endpoint, e.g. /projects.\n   * @param options - Request queryString options which may also include page variables.\n   */\n  async pagedRequest<T = any>(\n    endpoint: string,\n    options?: CommonListOptions,\n  ): Promise<PagedResponse<T>> {\n    const request = new URL(`${this.config.apiBaseUrl}${endpoint}`);\n    for (const key in options) {\n      if (options[key] !== undefined && options[key] !== '') {\n        request.searchParams.append(key, options[key]!.toString());\n      }\n    }\n\n    this.logger.debug(`Fetching: ${request.toString()}`);\n    const response = await fetch(\n      request.toString(),\n      getGitLabRequestOptions(this.config),\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n          response.status\n        } - ${response.statusText}`,\n      );\n    }\n    return response.json().then(items => {\n      const nextPage = response.headers.get('x-next-page');\n\n      return {\n        items,\n        nextPage: nextPage ? Number(nextPage) : null,\n      } as PagedResponse<any>;\n    });\n  }\n}\n\n/**\n * Advances through each page and provides each item from a paginated request.\n *\n * The async generator function yields each item from repeated calls to the\n * provided request function. The generator walks through each available page by\n * setting the page key in the options passed into the request function and\n * making repeated calls until there are no more pages.\n *\n * @see {@link pagedRequest}\n * @param request - Function which returns a PagedResponse to walk through.\n * @param options - Initial ListOptions for the request function.\n */\nexport async function* paginated<T = any>(\n  request: (options: CommonListOptions) => Promise<PagedResponse<T>>,\n  options: CommonListOptions,\n) {\n  let res;\n  do {\n    res = await request(options);\n    options.page = res.nextPage;\n    for (const item of res.items) {\n      yield item;\n    }\n  } while (res.nextPage);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readTaskScheduleDefinitionFromConfig } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport { GitlabProviderConfig } from '../lib';\n\n/**\n * Extracts the gitlab config from a config object\n *\n * @public\n *\n * @param id - The provider key\n * @param config - The config object to extract from\n */\nfunction readGitlabConfig(id: string, config: Config): GitlabProviderConfig {\n  const group = config.getOptionalString('group') ?? '';\n  const host = config.getString('host');\n  const branch = config.getOptionalString('branch');\n  const fallbackBranch = config.getOptionalString('fallbackBranch') ?? 'master';\n  const catalogFile =\n    config.getOptionalString('entityFilename') ?? 'catalog-info.yaml';\n  const projectPattern = new RegExp(\n    config.getOptionalString('projectPattern') ?? /[\\s\\S]*/,\n  );\n  const userPattern = new RegExp(\n    config.getOptionalString('userPattern') ?? /[\\s\\S]*/,\n  );\n  const groupPattern = new RegExp(\n    config.getOptionalString('groupPattern') ?? /[\\s\\S]*/,\n  );\n  const orgEnabled: boolean = config.getOptionalBoolean('orgEnabled') ?? false;\n  const skipForkedRepos: boolean =\n    config.getOptionalBoolean('skipForkedRepos') ?? false;\n\n  const schedule = config.has('schedule')\n    ? readTaskScheduleDefinitionFromConfig(config.getConfig('schedule'))\n    : undefined;\n\n  return {\n    id,\n    group,\n    branch,\n    fallbackBranch,\n    host,\n    catalogFile,\n    projectPattern,\n    userPattern,\n    groupPattern,\n    schedule,\n    orgEnabled,\n    skipForkedRepos,\n  };\n}\n\n/**\n * Extracts the gitlab config from a config object array\n *\n * @public\n *\n * @param config - The config object to extract from\n */\nexport function readGitlabConfigs(config: Config): GitlabProviderConfig[] {\n  const configs: GitlabProviderConfig[] = [];\n\n  const providerConfigs = config.getOptionalConfig('catalog.providers.gitlab');\n\n  if (!providerConfigs) {\n    return configs;\n  }\n\n  for (const id of providerConfigs.keys()) {\n    configs.push(readGitlabConfig(id, providerConfigs.getConfig(id)));\n  }\n\n  return configs;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PluginTaskScheduler, TaskRunner } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport { GitLabIntegration, ScmIntegrations } from '@backstage/integration';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n  LocationSpec,\n  locationSpecToLocationEntity,\n} from '@backstage/plugin-catalog-node';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\nimport {\n  GitLabClient,\n  GitLabProject,\n  GitlabProviderConfig,\n  paginated,\n  readGitlabConfigs,\n} from '../lib';\n\ntype Result = {\n  scanned: number;\n  matches: GitLabProject[];\n};\n\n/**\n * Discovers entity definition files in the groups of a Gitlab instance.\n * @public\n */\nexport class GitlabDiscoveryEntityProvider implements EntityProvider {\n  private readonly config: GitlabProviderConfig;\n  private readonly integration: GitLabIntegration;\n  private readonly logger: Logger;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      schedule?: TaskRunner;\n      scheduler?: PluginTaskScheduler;\n    },\n  ): GitlabDiscoveryEntityProvider[] {\n    if (!options.schedule && !options.scheduler) {\n      throw new Error('Either schedule or scheduler must be provided.');\n    }\n\n    const providerConfigs = readGitlabConfigs(config);\n    const integrations = ScmIntegrations.fromConfig(config).gitlab;\n    const providers: GitlabDiscoveryEntityProvider[] = [];\n\n    providerConfigs.forEach(providerConfig => {\n      const integration = integrations.byHost(providerConfig.host);\n      if (!integration) {\n        throw new Error(\n          `No gitlab integration found that matches host ${providerConfig.host}`,\n        );\n      }\n\n      if (!options.schedule && !providerConfig.schedule) {\n        throw new Error(\n          `No schedule provided neither via code nor config for GitlabDiscoveryEntityProvider:${providerConfig.id}.`,\n        );\n      }\n\n      const taskRunner =\n        options.schedule ??\n        options.scheduler!.createScheduledTaskRunner(providerConfig.schedule!);\n\n      providers.push(\n        new GitlabDiscoveryEntityProvider({\n          ...options,\n          config: providerConfig,\n          integration,\n          taskRunner,\n        }),\n      );\n    });\n    return providers;\n  }\n\n  private constructor(options: {\n    config: GitlabProviderConfig;\n    integration: GitLabIntegration;\n    logger: Logger;\n    taskRunner: TaskRunner;\n  }) {\n    this.config = options.config;\n    this.integration = options.integration;\n    this.logger = options.logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(options.taskRunner);\n  }\n\n  getProviderName(): string {\n    return `GitlabDiscoveryEntityProvider:${this.config.id}`;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    await this.scheduleFn();\n  }\n\n  private createScheduleFn(taskRunner: TaskRunner): () => Promise<void> {\n    return async () => {\n      const taskId = `${this.getProviderName()}:refresh`;\n      return taskRunner.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: GitlabDiscoveryEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n\n  async refresh(logger: Logger): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n\n    const client = new GitLabClient({\n      config: this.integration.config,\n      logger: logger,\n    });\n\n    const projects = paginated<GitLabProject>(\n      options => client.listProjects(options),\n      {\n        archived: false,\n        group: this.config.group,\n        page: 1,\n        per_page: 50,\n      },\n    );\n\n    const res: Result = {\n      scanned: 0,\n      matches: [],\n    };\n\n    for await (const project of projects) {\n      if (!this.config.projectPattern.test(project.path_with_namespace ?? '')) {\n        continue;\n      }\n\n      res.scanned++;\n\n      if (\n        this.config.skipForkedRepos &&\n        project.hasOwnProperty('forked_from_project')\n      ) {\n        continue;\n      }\n\n      if (\n        !this.config.branch &&\n        this.config.fallbackBranch === '*' &&\n        project.default_branch === undefined\n      ) {\n        continue;\n      }\n\n      const project_branch =\n        this.config.branch ??\n        project.default_branch ??\n        this.config.fallbackBranch;\n\n      const projectHasFile: boolean = await client.hasFile(\n        project.path_with_namespace ?? '',\n        project_branch,\n        this.config.catalogFile,\n      );\n      if (projectHasFile) {\n        res.matches.push(project);\n      }\n    }\n\n    const locations = res.matches.map(p => this.createLocationSpec(p));\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: locations.map(location => ({\n        locationKey: this.getProviderName(),\n        entity: locationSpecToLocationEntity({ location }),\n      })),\n    });\n  }\n\n  private createLocationSpec(project: GitLabProject): LocationSpec {\n    const project_branch =\n      this.config.branch ??\n      project.default_branch ??\n      this.config.fallbackBranch;\n    return {\n      type: 'url',\n      target: `${project.web_url}/-/blob/${project_branch}/${this.config.catalogFile}`,\n      presence: 'optional',\n    };\n  }\n}\n"],"names":["__publicField","fetch","getGitLabRequestOptions","_a","readTaskScheduleDefinitionFromConfig","ScmIntegrations","uuid","locationSpecToLocationEntity"],"mappings":"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"}